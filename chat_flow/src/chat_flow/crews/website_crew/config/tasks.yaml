website_urls_scraping_task:
  description: >
    Analyze the website at {website_url} and identify all subpage links present on the page.
  expected_output: >
    Return back a filtered list of string urls that are the most relevant. This should be for a pydantic model
    called URLs with a single field in it called "urls" and is of type list[str]. The output format should be in
    "urls": list[str] form
  agent: website_url_scraper

website_urls_selection_task:
  description: >
    Given a list of urls and subpage urls, select up to 6 links from the given list
        that seem to provide information on the website or company's products or services, social media, description,
        locations, business information or any relevant information to the business. Ignore any links that seem like
        they are translations, advertisements, or seem irrelevant.
  expected_output: >
    Return back a filtered list of string urls that are the most relevant. This should be for a pydantic model
    called URLs with a single field in it called "urls" and is of type list[str]. The output format should be in
    "urls": list[str] form
  context: [website_urls_scraping_task]
  agent: website_url_analyst

website_content_analysis_task:
  description: >
    Given a list of filtered urls, use the website scraper tool to retrieve the contents of the given urls. Based on
    the information returned, extract the website or company's products or services, social media, description,
    locations, business information or any relevant information to the business.
  expected_output: >
    Provide an output that includes the name of the business or website with its url. Provide a brief description between
    3 to 5 sentences describing what this business does. If data is found, provide the goods or services they have listed
    and if included, pricing for said goods and services. Also include what social media they're on and the links they
    have provided to it.
  agent: website_content_analyst
